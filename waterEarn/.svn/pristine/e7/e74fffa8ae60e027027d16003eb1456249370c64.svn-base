package com.shuidi168.earn.service.impl;

import java.sql.Timestamp;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;

import com.shuidi168.earn.dao.IDeviceDAO;
import com.shuidi168.earn.dao.IGeneralUserDAO;
import com.shuidi168.earn.domain.Devices;
import com.shuidi168.earn.domain.GeneralUser;
import com.shuidi168.earn.exception.AgentUserException;
import com.shuidi168.earn.service.IGeneralUserService;
import com.shuidi168.earn.util.AssertUtil;
import com.shuidi168.earn.util.CreateRandomVcode;
import com.shuidi168.earn.util.JwtToken;
import com.shuidi168.earn.util.LoginConstants;
import com.shuidi168.earn.util.LoginErrCode;
import com.shuidi168.earn.util.MD5;
import com.shuidi168.earn.util.RegisterConstants;
import com.shuidi168.earn.util.RegisterErrCode;
import com.shuidi168.earn.vo.DeviceAndGeneralUserVo;
import com.shuidi168.earn.vo.LoginVo;

@Service
@Transactional
public class GeneralUserServiceImpl implements IGeneralUserService {

	@Autowired
	private IGeneralUserDAO generalUserDao;
	@Autowired
	private IDeviceDAO deviceDAO;
	@Autowired
	private RedisTemplate<String, Object> redisTemplate;
	// 通过手机号查询对象
	private final static String queryGeneralUserByPhone = "queryGeneralUserByPhone";
	// 通过手机号查询对象id
	private final static String queryGeneralUserIdByInviteCode = "queryGeneralUserIdByInviteCode";
	// 查询是否有登录用户
	private final static String queryGeneralUserByPasswordAndPhone = "queryGeneralUserByPasswordAndPhone";
	// 查询是否通过微信绑定
	private final static String queryPhoneByOpenId = "queryPhoneByOpenId";
	// 私有静态断言类对象
	private static AssertUtil instance = AssertUtil.instance();

	/**
	 * 用户注册业务
	 * 
	 * @param 注册对象
	 */
	@Override
	public void register(GeneralUser generalUser) {
		// 手机号
		String phone = generalUser.getPhone();
		// 密码
		String password = generalUser.getPassword();
		// 验证码
		String smsCode = generalUser.getSmsCode();
		// 邀请码
		String inviteCode = generalUser.getInviteCode();
		// 参数的基本校验
		validate(phone, password);
		instance.isNotNull(smsCode, "验证码不能为空", RegisterErrCode.SMS_CODE_NULL);
		instance.isLength(smsCode, RegisterConstants.LENGH_VERIFYCODE,
				"验证码长度必须为" + RegisterConstants.LENGH_VERIFYCODE + "位", RegisterErrCode.SMS_CODE_NULL,
				RegisterErrCode.SMS_CODE_LENGTH);
		// 若邀请码不为空则需要进行参数校验
		if (inviteCode != null && inviteCode.trim().length() != 0) {
			instance.isLength(inviteCode, RegisterConstants.LENGH_INVITECODE,
					"邀请码长度必须为" + RegisterConstants.LENGH_INVITECODE + "位", 0,
					RegisterErrCode.INVALID_INVITECODE_LENGTH);
		}
		// 手机号数据库验证，查询数据库是否已经存在当前注册手机号
		List<GeneralUser> list = generalUserDao.executeQuery(queryGeneralUserByPhone, phone);
		// 如果长度为1，表示已经存在该手机号
		if (list.size() == 1) {
			throw new AgentUserException("该手机号已被注册", RegisterErrCode.REGISTERED_PHONE);
		}
		// 从Redis中查询出发送短信的手机验证码
		String code = (String) redisTemplate.opsForValue().get("registerCode_" + phone);
		// Redis中查询出验证码
		instance.isNotNull(code, "验证码已失效,请重新发送短信", RegisterErrCode.SMS_CODE_FAILURE).isEquals(code, smsCode, "验证码错误",
				RegisterErrCode.SMS_CODE_NULL, RegisterErrCode.SMS_CODE_ERROR);
		// 判断邀请码是否为null，空就直接生成邀请码保存，如有则查询邀请码所对应的id添加到用户的parentId中
		if (StringUtils.isEmpty(inviteCode)) {
			generalUser.setInviteCode(CreateRandomVcode.createRandomVcode());
		} else {
			// 查询数据库所对应的邀请码用户id
			List<GeneralUser> inviteCodeList = generalUserDao.executeQuery(queryGeneralUserIdByInviteCode, inviteCode);
			// 若查询不到数据
			if (inviteCodeList.isEmpty()) {
				instance.isNotNull(null, "邀请码错误", RegisterErrCode.INVITE_CODE_ERROR);
			}
			// 查询到数据，将对应的id添加到用户的parentId中
			for (GeneralUser generalUser2 : inviteCodeList) {
				generalUser.setParentId(generalUser2.getId());
			}
			// 生成邀请码并保存
			generalUser.setInviteCode(CreateRandomVcode.createRandomVcode());
		}
		// 对密码进行MD5加密
		String Md5Password = MD5.encode(password + phone);
		generalUser.setPassword(Md5Password);
		// 设置注册的时间戳
		generalUser.setRegTimestamp(new Timestamp(new Date().getTime()));
		generalUserDao.save(generalUser);
	}

	/**
	 * 用户登录业务
	 * 
	 * @param 用户信息对象
	 * @return JwtToken字符串
	 */
	@Override
	public LoginVo login(DeviceAndGeneralUserVo deviceAndGeneralUserVo) {
		String phone = null;
		String brand = null;
		String model = null;
		String password = null;
		String osVersion = null;
		// 登录用户基本信息
		GeneralUser generalUser = deviceAndGeneralUserVo.getGeneralUser();
		// 登录设备
		Devices devices = deviceAndGeneralUserVo.getDevices();
		if (generalUser != null && devices != null) {
			// 手机号
			phone = generalUser.getPhone();
			// 密码
			password = generalUser.getPassword();
			// 操作系统版本
			osVersion = devices.getOsVersion();
			// 手机品牌
			brand = devices.getBrand();
			// 手机型号
			model = devices.getModel();
		}
		// 参数的基本校验
		validate(phone, password);
		instance.isNotNull(osVersion, "必须有操作系统版本", RegisterErrCode.OS_VERSION_NULL);
		instance.isNotNull(brand, "必须有手机品牌", RegisterErrCode.BRAND_NULL);
		instance.isNotNull(model, "必须有手机型号", RegisterErrCode.MODEL_NULL);
		// 先对password进行MD5加密
		String MD5Password = MD5.encode(password + phone);
		// 根据手机号和密码查询数据库是否存在该用户
		List<GeneralUser> generalUserList = generalUserDao.executeQuery(queryGeneralUserByPasswordAndPhone, phone,
				MD5Password);
		if (generalUserList.isEmpty()) {
			instance.isNotNull(null, "没有该用户", RegisterErrCode.USER_NULL);
		}
		// 创建接受返参的VO对象
		LoginVo loginVo = new LoginVo();
		// 有该用户，则判断用户是否绑定了微信，即判断是否有wx_open_id
		generalUser = generalUserList.get(0);
		instance.isNotNull(generalUser.getWxOpenId(), "没有微信授权", RegisterErrCode.WX_OPENID_NULL);
		try {
			// 保存设备信息
			deviceDAO.save(devices);
			// 为该用户生成JwtToken
			String jwtToken = JwtToken.createToken(generalUser.getId());
			// 将jwtToken缓存到redis
			redisTemplate.opsForValue().set("token_" + generalUser.getId(), jwtToken);
			// 测试是否可以从Redis中获取数据
			System.out.println(redisTemplate.opsForValue().get("token_" + generalUser.getId()));
			// 保存到Mysql数据库中
			generalUser.setJwtToken(jwtToken);
			generalUser.setDevicesId(devices.getId());
			generalUserDao.update(generalUser);
			loginVo.setJwtToken(jwtToken);
			loginVo.setBindWeChat(true);
		} catch (Exception e) {
			e.printStackTrace();

		}
		return loginVo;
	}

	/**
	 * 微信登录
	 * 
	 * @param openid
	 */
	@Override
	public boolean queryPhoneByOpenId(LoginVo loginVo) {
		String phone = null;
		String openId = null;
		if (loginVo != null) {
			phone = loginVo.getPhone();
			openId = loginVo.getWxOpenId();
		}
		if (phone != null) {
			List<GeneralUser> list = generalUserDao.executeQuery(queryGeneralUserByPhone, phone);
			if(!list.isEmpty()){
				GeneralUser generalUser = list.get(0);
				// 设置openid
				generalUser.setWxOpenId(openId);
				// 通过微信获取微信数据并设置微信相关的数据
				generalUser.setNickname("沃登");
				generalUser.setCountry("中国");
				generalUser.setCity("惠州");
				generalUser.setProvince("广东省");
				generalUserDao.update(generalUser);				
			}
		}
		// 查询对于的openid相应的phone是否存在
		List<GeneralUser> list = generalUserDao.executeQuery(queryPhoneByOpenId, openId);
		if (list.isEmpty()) {
			throw new AgentUserException("未绑定手机", LoginErrCode.NOT_BIND_PHONE);
		}
		GeneralUser generalUser = list.get(0);
		// 从缓存中查询对应的token，若有则延长token的时间
		String token = (String) redisTemplate.opsForValue().get("token_" + generalUser.getId());
		// 若无，生成token
		if (StringUtils.isEmpty(token)) {
			try {
				// 为该用户生成JwtToken
				String jwtToken = JwtToken.createToken(generalUser.getId());
				// 将jwtToken缓存到redis
				redisTemplate.opsForValue().set("token_" + generalUser.getId(), jwtToken);
				// 隔一段时间将token同步保存到数据库
				generalUser.setJwtToken(jwtToken);
				generalUserDao.update(generalUser);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return true;
	}

	/**
	 * 微信登录绑定手机号
	 */
	@Override
	public void weChatBindPhone(LoginVo loginVo) {
		// 手机号
		String phone = loginVo.getPhone();
		// 微信openid
		String wxOpenId = loginVo.getWxOpenId();
		// 验证码smsCode
		String smsCode = loginVo.getSmsCode();
		// 基本参数判断
		instance.isNotNull(phone, "手机号不能为空", RegisterErrCode.PHONE_NULL);
		instance.isMobile(phone, "手机号格式不对", RegisterErrCode.INVALID_PHONE);
		instance.isLength(phone, RegisterConstants.LENGTH_PHONE, "手机号长度必须为" + RegisterConstants.LENGTH_PHONE + "位",
				RegisterErrCode.PHONE_NULL, RegisterErrCode.INVALID_PHONE_LENGTH);
		instance.isNotNull(smsCode, "验证码不能为空", RegisterErrCode.SMS_CODE_NULL);
		instance.isLength(smsCode, RegisterConstants.LENGH_VERIFYCODE,
				"验证码长度必须为" + RegisterConstants.LENGH_VERIFYCODE + "位", RegisterErrCode.SMS_CODE_NULL,
				RegisterErrCode.SMS_CODE_LENGTH);

		// 手机号数据库验证，查询数据库是否已经存在当前注册手机号
		List<GeneralUser> list = generalUserDao.executeQuery(queryGeneralUserByPhone, phone);
		// 若未注册，则将openid和phone和微信其他相关信息保存到数据库中
		if (list.isEmpty()) {
			GeneralUser generalUser = new GeneralUser();
			// 设置openid
			generalUser.setWxOpenId(wxOpenId);
			// 设置手机号
			generalUser.setPhone(phone);
			// 通过微信获取微信数据并设置微信相关的数据
			generalUser.setNickname("沃登");
			generalUser.setCountry("中国");
			generalUser.setCity("惠州");
			generalUser.setProvince("广东省");
			// 设置注册的时间戳
			generalUser.setRegTimestamp(new Timestamp(new Date().getTime()));
			generalUserDao.save(generalUser);
		} else {
			// 若已注册，但未绑定微信，将openid和微信其他相关信息更新到数据库中
			GeneralUser generalUser = list.get(0);
			// 设置openid
			generalUser.setWxOpenId(wxOpenId);
			// 通过微信获取微信数据并设置微信相关的数据
			generalUser.setNickname("沃登");
			generalUser.setCountry("中国");
			generalUser.setCity("惠州");
			generalUser.setProvince("广东省");
			generalUserDao.update(generalUser);
		}

	}

	/**
	 * 基本参数校验通用代码
	 * 
	 * @param phone
	 * @param password
	 */
	private static void validate(String phone, String password) {
		instance.isNotNull(phone, "手机号不能为空", RegisterErrCode.PHONE_NULL);
		instance.isMobile(phone, "手机号格式不对", RegisterErrCode.INVALID_PHONE);
		instance.isLength(phone, RegisterConstants.LENGTH_PHONE, "手机号长度必须为" + RegisterConstants.LENGTH_PHONE + "位",
				RegisterErrCode.PHONE_NULL, RegisterErrCode.INVALID_PHONE_LENGTH);
		instance.isNotNull(password, "密码不能为空", RegisterErrCode.PASSWORD_NULL);
		instance.isRangeLength(password, RegisterConstants.MIN_LENGTH_PASSWORD, RegisterConstants.MAX_LENGTH_PASSWORD,
				"密码的长度在" + RegisterConstants.MIN_LENGTH_PASSWORD + "-" + RegisterConstants.MAX_LENGTH_PASSWORD + "之间",
				RegisterErrCode.PASSWORD_NULL, RegisterErrCode.INVALID_PASSWORD_LENGTH);
	}

}
